// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// FinalizeAssertion invokes finalizeAssertion operation.
	//
	// Finalize Assertion.
	//
	// POST /assertion
	FinalizeAssertion(ctx context.Context, request OptFinalizeAssertionRequest) (FinalizeAssertionRes, error)
	// FinalizeAttestation invokes finalizeAttestation operation.
	//
	// Finalize Attestation.
	//
	// POST /attestation
	FinalizeAttestation(ctx context.Context, request FinalizeAttestationReq, params FinalizeAttestationParams) (FinalizeAttestationRes, error)
	// InitializeAssertion invokes initializeAssertion operation.
	//
	// Initialize Assertion.
	//
	// GET /assertion
	InitializeAssertion(ctx context.Context) (InitializeAssertionRes, error)
	// InitializeAttestation invokes initializeAttestation operation.
	//
	// Initialize Attestation.
	//
	// GET /attestation
	InitializeAttestation(ctx context.Context) (InitializeAttestationRes, error)
	// InitializeAttestationJSON invokes initializeAttestationJSON operation.
	//
	// Initialize Attestation JSON.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// GET /attestation/json
	InitializeAttestationJSON(ctx context.Context) (InitializeAttestationJSONRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// FinalizeAssertion invokes finalizeAssertion operation.
//
// Finalize Assertion.
//
// POST /assertion
func (c *Client) FinalizeAssertion(ctx context.Context, request OptFinalizeAssertionRequest) (FinalizeAssertionRes, error) {
	res, err := c.sendFinalizeAssertion(ctx, request)
	return res, err
}

func (c *Client) sendFinalizeAssertion(ctx context.Context, request OptFinalizeAssertionRequest) (res FinalizeAssertionRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("finalizeAssertion"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/assertion"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "FinalizeAssertion",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/assertion"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeFinalizeAssertionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeFinalizeAssertionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// FinalizeAttestation invokes finalizeAttestation operation.
//
// Finalize Attestation.
//
// POST /attestation
func (c *Client) FinalizeAttestation(ctx context.Context, request FinalizeAttestationReq, params FinalizeAttestationParams) (FinalizeAttestationRes, error) {
	res, err := c.sendFinalizeAttestation(ctx, request, params)
	return res, err
}

func (c *Client) sendFinalizeAttestation(ctx context.Context, request FinalizeAttestationReq, params FinalizeAttestationParams) (res FinalizeAttestationRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("finalizeAttestation"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/attestation"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "FinalizeAttestation",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/attestation"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeFinalizeAttestationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "session" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "session",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Session))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeFinalizeAttestationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// InitializeAssertion invokes initializeAssertion operation.
//
// Initialize Assertion.
//
// GET /assertion
func (c *Client) InitializeAssertion(ctx context.Context) (InitializeAssertionRes, error) {
	res, err := c.sendInitializeAssertion(ctx)
	return res, err
}

func (c *Client) sendInitializeAssertion(ctx context.Context) (res InitializeAssertionRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("initializeAssertion"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/assertion"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "InitializeAssertion",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/assertion"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeInitializeAssertionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// InitializeAttestation invokes initializeAttestation operation.
//
// Initialize Attestation.
//
// GET /attestation
func (c *Client) InitializeAttestation(ctx context.Context) (InitializeAttestationRes, error) {
	res, err := c.sendInitializeAttestation(ctx)
	return res, err
}

func (c *Client) sendInitializeAttestation(ctx context.Context) (res InitializeAttestationRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("initializeAttestation"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/attestation"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "InitializeAttestation",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/attestation"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeInitializeAttestationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// InitializeAttestationJSON invokes initializeAttestationJSON operation.
//
// Initialize Attestation JSON.
//
// Deprecated: schema marks this operation as deprecated.
//
// GET /attestation/json
func (c *Client) InitializeAttestationJSON(ctx context.Context) (InitializeAttestationJSONRes, error) {
	res, err := c.sendInitializeAttestationJSON(ctx)
	return res, err
}

func (c *Client) sendInitializeAttestationJSON(ctx context.Context) (res InitializeAttestationJSONRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("initializeAttestationJSON"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/attestation/json"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "InitializeAttestationJSON",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/attestation/json"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeInitializeAttestationJSONResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
