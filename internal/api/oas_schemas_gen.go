// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
)

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

func (*ErrorResponse) finalizeAssertionRes()     {}
func (*ErrorResponse) initializeAssertionRes()   {}
func (*ErrorResponse) initializeAttestationRes() {}

// ErrorResponseHeaders wraps ErrorResponse with response headers.
type ErrorResponseHeaders struct {
	SetCookie OptString
	Response  ErrorResponse
}

// GetSetCookie returns the value of SetCookie.
func (s *ErrorResponseHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *ErrorResponseHeaders) GetResponse() ErrorResponse {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *ErrorResponseHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseHeaders) SetResponse(val ErrorResponse) {
	s.Response = val
}

func (*ErrorResponseHeaders) finalizeAttestationRes() {}

// Ref: #/components/schemas/FinalizeAssertionRequest
type FinalizeAssertionRequest struct {
	ID       OptString                           `json:"id"`
	RawId    OptString                           `json:"rawId"`
	Response OptFinalizeAssertionRequestResponse `json:"response"`
	Type     OptString                           `json:"type"`
}

// GetID returns the value of ID.
func (s *FinalizeAssertionRequest) GetID() OptString {
	return s.ID
}

// GetRawId returns the value of RawId.
func (s *FinalizeAssertionRequest) GetRawId() OptString {
	return s.RawId
}

// GetResponse returns the value of Response.
func (s *FinalizeAssertionRequest) GetResponse() OptFinalizeAssertionRequestResponse {
	return s.Response
}

// GetType returns the value of Type.
func (s *FinalizeAssertionRequest) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *FinalizeAssertionRequest) SetID(val OptString) {
	s.ID = val
}

// SetRawId sets the value of RawId.
func (s *FinalizeAssertionRequest) SetRawId(val OptString) {
	s.RawId = val
}

// SetResponse sets the value of Response.
func (s *FinalizeAssertionRequest) SetResponse(val OptFinalizeAssertionRequestResponse) {
	s.Response = val
}

// SetType sets the value of Type.
func (s *FinalizeAssertionRequest) SetType(val OptString) {
	s.Type = val
}

type FinalizeAssertionRequestResponse struct {
	AuthenticatorData OptString `json:"authenticatorData"`
	ClientDataJSON    OptString `json:"clientDataJSON"`
	Signature         OptString `json:"signature"`
	UserHandle        OptString `json:"userHandle"`
}

// GetAuthenticatorData returns the value of AuthenticatorData.
func (s *FinalizeAssertionRequestResponse) GetAuthenticatorData() OptString {
	return s.AuthenticatorData
}

// GetClientDataJSON returns the value of ClientDataJSON.
func (s *FinalizeAssertionRequestResponse) GetClientDataJSON() OptString {
	return s.ClientDataJSON
}

// GetSignature returns the value of Signature.
func (s *FinalizeAssertionRequestResponse) GetSignature() OptString {
	return s.Signature
}

// GetUserHandle returns the value of UserHandle.
func (s *FinalizeAssertionRequestResponse) GetUserHandle() OptString {
	return s.UserHandle
}

// SetAuthenticatorData sets the value of AuthenticatorData.
func (s *FinalizeAssertionRequestResponse) SetAuthenticatorData(val OptString) {
	s.AuthenticatorData = val
}

// SetClientDataJSON sets the value of ClientDataJSON.
func (s *FinalizeAssertionRequestResponse) SetClientDataJSON(val OptString) {
	s.ClientDataJSON = val
}

// SetSignature sets the value of Signature.
func (s *FinalizeAssertionRequestResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetUserHandle sets the value of UserHandle.
func (s *FinalizeAssertionRequestResponse) SetUserHandle(val OptString) {
	s.UserHandle = val
}

// Ref: #/components/schemas/FinalizeAssertionResponse
type FinalizeAssertionResponse struct {
	ID       OptString                            `json:"id"`
	RawId    OptString                            `json:"rawId"`
	Response OptFinalizeAssertionResponseResponse `json:"response"`
	Type     OptString                            `json:"type"`
}

// GetID returns the value of ID.
func (s *FinalizeAssertionResponse) GetID() OptString {
	return s.ID
}

// GetRawId returns the value of RawId.
func (s *FinalizeAssertionResponse) GetRawId() OptString {
	return s.RawId
}

// GetResponse returns the value of Response.
func (s *FinalizeAssertionResponse) GetResponse() OptFinalizeAssertionResponseResponse {
	return s.Response
}

// GetType returns the value of Type.
func (s *FinalizeAssertionResponse) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *FinalizeAssertionResponse) SetID(val OptString) {
	s.ID = val
}

// SetRawId sets the value of RawId.
func (s *FinalizeAssertionResponse) SetRawId(val OptString) {
	s.RawId = val
}

// SetResponse sets the value of Response.
func (s *FinalizeAssertionResponse) SetResponse(val OptFinalizeAssertionResponseResponse) {
	s.Response = val
}

// SetType sets the value of Type.
func (s *FinalizeAssertionResponse) SetType(val OptString) {
	s.Type = val
}

func (*FinalizeAssertionResponse) finalizeAssertionRes() {}

type FinalizeAssertionResponseResponse struct {
	AuthenticatorData OptString `json:"authenticatorData"`
	ClientDataJSON    OptString `json:"clientDataJSON"`
	Signature         OptString `json:"signature"`
	UserHandle        OptString `json:"userHandle"`
}

// GetAuthenticatorData returns the value of AuthenticatorData.
func (s *FinalizeAssertionResponseResponse) GetAuthenticatorData() OptString {
	return s.AuthenticatorData
}

// GetClientDataJSON returns the value of ClientDataJSON.
func (s *FinalizeAssertionResponseResponse) GetClientDataJSON() OptString {
	return s.ClientDataJSON
}

// GetSignature returns the value of Signature.
func (s *FinalizeAssertionResponseResponse) GetSignature() OptString {
	return s.Signature
}

// GetUserHandle returns the value of UserHandle.
func (s *FinalizeAssertionResponseResponse) GetUserHandle() OptString {
	return s.UserHandle
}

// SetAuthenticatorData sets the value of AuthenticatorData.
func (s *FinalizeAssertionResponseResponse) SetAuthenticatorData(val OptString) {
	s.AuthenticatorData = val
}

// SetClientDataJSON sets the value of ClientDataJSON.
func (s *FinalizeAssertionResponseResponse) SetClientDataJSON(val OptString) {
	s.ClientDataJSON = val
}

// SetSignature sets the value of Signature.
func (s *FinalizeAssertionResponseResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetUserHandle sets the value of UserHandle.
func (s *FinalizeAssertionResponseResponse) SetUserHandle(val OptString) {
	s.UserHandle = val
}

// FinalizeAttestationOK is response for FinalizeAttestation operation.
type FinalizeAttestationOK struct {
	SetCookie OptString
}

// GetSetCookie returns the value of SetCookie.
func (s *FinalizeAttestationOK) GetSetCookie() OptString {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *FinalizeAttestationOK) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*FinalizeAttestationOK) finalizeAttestationRes() {}

type FinalizeAttestationReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FinalizeAttestationReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Ref: #/components/schemas/InitializeAssertionResponse
type InitializeAssertionResponse struct {
	Data OptString `json:"data"`
}

// GetData returns the value of Data.
func (s *InitializeAssertionResponse) GetData() OptString {
	return s.Data
}

// SetData sets the value of Data.
func (s *InitializeAssertionResponse) SetData(val OptString) {
	s.Data = val
}

func (*InitializeAssertionResponse) initializeAssertionRes() {}

type InitializeAttestationOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s InitializeAttestationOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// InitializeAttestationOKHeaders wraps InitializeAttestationOK with response headers.
type InitializeAttestationOKHeaders struct {
	SetCookie OptString
	Response  InitializeAttestationOK
}

// GetSetCookie returns the value of SetCookie.
func (s *InitializeAttestationOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *InitializeAttestationOKHeaders) GetResponse() InitializeAttestationOK {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *InitializeAttestationOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *InitializeAttestationOKHeaders) SetResponse(val InitializeAttestationOK) {
	s.Response = val
}

func (*InitializeAttestationOKHeaders) initializeAttestationRes() {}

// NewOptFinalizeAssertionRequest returns new OptFinalizeAssertionRequest with value set to v.
func NewOptFinalizeAssertionRequest(v FinalizeAssertionRequest) OptFinalizeAssertionRequest {
	return OptFinalizeAssertionRequest{
		Value: v,
		Set:   true,
	}
}

// OptFinalizeAssertionRequest is optional FinalizeAssertionRequest.
type OptFinalizeAssertionRequest struct {
	Value FinalizeAssertionRequest
	Set   bool
}

// IsSet returns true if OptFinalizeAssertionRequest was set.
func (o OptFinalizeAssertionRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFinalizeAssertionRequest) Reset() {
	var v FinalizeAssertionRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFinalizeAssertionRequest) SetTo(v FinalizeAssertionRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFinalizeAssertionRequest) Get() (v FinalizeAssertionRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFinalizeAssertionRequest) Or(d FinalizeAssertionRequest) FinalizeAssertionRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFinalizeAssertionRequestResponse returns new OptFinalizeAssertionRequestResponse with value set to v.
func NewOptFinalizeAssertionRequestResponse(v FinalizeAssertionRequestResponse) OptFinalizeAssertionRequestResponse {
	return OptFinalizeAssertionRequestResponse{
		Value: v,
		Set:   true,
	}
}

// OptFinalizeAssertionRequestResponse is optional FinalizeAssertionRequestResponse.
type OptFinalizeAssertionRequestResponse struct {
	Value FinalizeAssertionRequestResponse
	Set   bool
}

// IsSet returns true if OptFinalizeAssertionRequestResponse was set.
func (o OptFinalizeAssertionRequestResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFinalizeAssertionRequestResponse) Reset() {
	var v FinalizeAssertionRequestResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFinalizeAssertionRequestResponse) SetTo(v FinalizeAssertionRequestResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFinalizeAssertionRequestResponse) Get() (v FinalizeAssertionRequestResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFinalizeAssertionRequestResponse) Or(d FinalizeAssertionRequestResponse) FinalizeAssertionRequestResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFinalizeAssertionResponseResponse returns new OptFinalizeAssertionResponseResponse with value set to v.
func NewOptFinalizeAssertionResponseResponse(v FinalizeAssertionResponseResponse) OptFinalizeAssertionResponseResponse {
	return OptFinalizeAssertionResponseResponse{
		Value: v,
		Set:   true,
	}
}

// OptFinalizeAssertionResponseResponse is optional FinalizeAssertionResponseResponse.
type OptFinalizeAssertionResponseResponse struct {
	Value FinalizeAssertionResponseResponse
	Set   bool
}

// IsSet returns true if OptFinalizeAssertionResponseResponse was set.
func (o OptFinalizeAssertionResponseResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFinalizeAssertionResponseResponse) Reset() {
	var v FinalizeAssertionResponseResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFinalizeAssertionResponseResponse) SetTo(v FinalizeAssertionResponseResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFinalizeAssertionResponseResponse) Get() (v FinalizeAssertionResponseResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFinalizeAssertionResponseResponse) Or(d FinalizeAssertionResponseResponse) FinalizeAssertionResponseResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
